/*************************************************************************
 *
 * Copyright (c) 2018-2022, Lawrence Livermore National Security, LLC.
 * See the top-level LICENSE file for details.
 * Produced at the Lawrence Livermore National Laboratory
 *
 * SPDX-License-Identifier: MIT
 *
 ************************************************************************/
#ifndef _ELECTRIC_FIELD_DRIVER_H_
#define _ELECTRIC_FIELD_DRIVER_H_

#include "tbox/Box.H"
#include "ProblemDomain.H"

namespace Loki {

/**
 * ElectricFieldDriver is an abstract base class for all ElectricFieldDriver
 * implementations.
 */
class ElectricFieldDriver
{
public:
   /**
    * @brief Default Constructor.
    */
   ElectricFieldDriver();

   /**
    * @brief Destructor.
    */
   virtual
   ~ElectricFieldDriver();

   /**
    * @brief Compute the values of the 2 components of the electric field at
    *        the supplied time.
    *
    * @param[out] a_em_vars The em fields including the electric fields
    *                       generated by all the drivers.
    * @param[out] a_ext_efield The electric field generated by all the drivers
    *                          needed if there are any particles.
    * @param[in] a_domain Information about the problem domain.
    * @param[in] a_sums_into 1 indicates just a_em_vars, 2 indicates just
    *                        a_ext_efield, 3 indicates both.
    * @param[in] a_time The time for this electric field evaluation.
    * @param[in] a_dt The time step for this electric field evaluation.
    * @param[in] a_first_rk_stage True if called from the first RK stage.
    */
   virtual
   void
   evaluate(
      ParallelArray& a_em_vars,
      ParallelArray& a_ext_efield,
      const ProblemDomain& a_domain,
      int a_sums_into,
      double a_time,
      double a_dt,
      bool a_first_rk_stage) const = 0;

   /**
    * @brief Compute the time dependent envelope of the electric field at the
    *        supplied time.
    *
    * @param[out] a_envel The time dependent envelope of the electric field.
    * @param[in] a_time The time for this electric field envelope evaluation.
    */
   virtual
   void
   evaluateTimeEnvelope(
      double& a_envel,
      double a_time) const = 0;

   /**
    * @brief Print the driver's parameters.
    */
   virtual
   void
   printParameters() const = 0;

   /**
    * @brief Write this class to a restart database.
    *
    * @param[out] a_writer Restart file writer.
    * @param[in] a_write_data If true this processor actually writes its data.
    */
   virtual
   void
   putToDatabase(
      RestartWriter& a_writer,
      bool a_write_data) const = 0;

   /**
    * @brief Read this class' state from a restart database.
    *
    * @param[in] a_reader Restart file reader.
    */
   virtual
   void
   getFromDatabase(
      RestartReader& a_reader) = 0;

private:
   // Unimplemented copy constructor.
   ElectricFieldDriver(
      const ElectricFieldDriver& other);

   // Unimplemented assignment operator.
   ElectricFieldDriver&
   operator = (
      const ElectricFieldDriver& rhs);
};

} // end namespace Loki

#endif
