/*************************************************************************
 *
 * Copyright (c) 2018-2022, Lawrence Livermore National Security, LLC.
 * See the top-level LICENSE file for details.
 * Produced at the Lawrence Livermore National Laboratory
 *
 * SPDX-License-Identifier: MIT
 *
 ************************************************************************/
#ifndef _SHAPED_RAMPED_COSINE_DRIVER_H_
#define _SHAPED_RAMPED_COSINE_DRIVER_H_

#include "ElectricFieldDriver.H"
#include "LokiInputParser.H"
#include <vector>

#include <string>

namespace Loki {

/**
 * Implementation of the ElectricFieldDriver interface for a shaped rampled
 * cosine drive with the following functional form:
 *
 * @verbatim
 *  E_ext = E0*f(t)*g(x)*h(y)*cos(pi*x/xwidth-omega*(t-t0)+phase-0.5*alpha*(t-t0-t_res)^2)
 *
 *          / 0.5+0.5*tanh(4.0*(2.0*(t-t0)/t_rampup-1.0))     for t0 <= t < t0+t_rampup
 *         /  0.5-0.5*tanh(4.0)                               for t0+t_rampup <= t < t0+t_rampup+t_hold
 *  f(t) =|
 *         \  0.5-0.5*tanh(4.0*(2.0*(t-t0-t_rampup-t_hold)/t_rampdown-1.0)) for t0+t_rampup+t_hold <= t < t0+t_rampup+t_hold+t_rampdown
 *          \ 0                                               else
 *
 *         / 1-x_shape*(sin(pi*(x-x0)/lwidth))**2             for |x-x0| < lwidth/2
 *  g(x) =|
 *         \ 1-x_shape                                        else
 *
 *         / 1-shape*(sin(pi*y/ywidth))**2                    for |y| < ywidth/2
 *  h(y) =|
 *         \ 1-shape                                          else
 * @endverbatim
 *
 * This class needs to save state to and restore it from a restart file to
 * handle random, noisy phases.  We use a random number generator to compute
 * the phases.  So on restart we need to know how many times the random number
 * generator has already been called during this simulation.  We call the
 * random number generator that many times before computing the next random
 * phase so that they still have the right properties.
 */
class ShapedRampedCosineDriver : public ElectricFieldDriver
{
public:
   /**
    * @brief Constructor.
    *
    * @param[in] a_pp Where the input parameters are to be found.
    * @param[in] a_driver_num Which driver this one is.
    * @param[in] a_species_num One based index of the KineticSpecies this
    *                          driver is associated with.
    */
   ShapedRampedCosineDriver(
      LokiInputParser& a_pp,
      int a_driver_num,
      int a_species_num);

   /**
    * @brief Destructor.
    */
   virtual
   ~ShapedRampedCosineDriver();

   //@{

   //! @name Implementation of ElectricFieldDriver interface.

   /**
    * @brief Compute the values of the 2 components of the electric field at
    *        the supplied time.
    *
    * @param[out] a_em_vars The em fields including the electric fields
    *                       generated by all the drivers.
    * @param[out] a_ext_efield The electric field generated by all the drivers
    *                          needed if there are any particles.
    * @param[in] a_domain Information about the problem domain.
    * @param[in] a_sums_into 1 indicates just a_em_vars, 2 indicates just
    *                        a_ext_efield, 3 indicates both.
    * @param[in] a_time The time for this electric field evaluation.
    * @param[in] a_dt The time step for this electric field evaluation.
    * @param[in] a_first_rk_stage True if called from the first RK stage.
    */
   virtual
   void
   evaluate(
      ParallelArray& a_em_vars,
      ParallelArray& a_ext_efield,
      const ProblemDomain& a_domain,
      int a_sums_into,
      double a_time,
      double a_dt,
      bool a_first_rk_stage) const;

   /**
    * @brief Compute the time dependent envelope of the electric field at the
    *        supplied time.
    *
    * @param[out] a_envel The time dependent envelope of the electric field.
    * @param[in] a_time The time for this electric field envelope evaluation.
    */
   virtual
   void
   evaluateTimeEnvelope(
      double& a_envel,
      double a_time) const;

   /**
    * @brief Print the driver's parameters.
    */
   virtual
   void
   printParameters() const;

   /**
    * @brief Write this class to a restart database.
    *
    * @param[out] a_writer Restart file writer.
    * @param[in] a_write_data If true this processor actually writes its data.
    */
   virtual
   void
   putToDatabase(
      RestartWriter& a_writer,
      bool a_write_data) const;

   /**
    * @brief Read this class' state from a restart database.
    *
    * @param[in] a_reader Restart file reader.
    */
   virtual
   void
   getFromDatabase(
      RestartReader& a_reader);

   //@}

   /**
    * @brief Returns true if name describes this class' type.
    *
    * @param[in] a_name Name of a type of electric field driver.
    *
    * @return true if name describes this class' type.
    */
   static
   bool
   isType(
      const string& a_name);

private:
   // Unimplemented default constructor.
   ShapedRampedCosineDriver();

   // Unimplemented copy constructor.
   ShapedRampedCosineDriver(
      const ShapedRampedCosineDriver& other);

   // Unimplemented assignment operator.
   ShapedRampedCosineDriver&
   operator = (
      const ShapedRampedCosineDriver& rhs);

   // Parse the input parameters.
   void
   parseParameters(
      LokiInputParser& a_pp);

   // Computes the phase of the cos dependent part of the expression.
   void
   computePhase(
      double a_dt,
      bool a_first_rk_stage) const;

   // Compute the next random number.
   double
   rand() const
   {
      m_next = m_next * 1103515245 + 12345;
      double random_val = (unsigned)(m_next/65536) % 32768;
      random_val = random_val/32768.0;
      return random_val;
   }

   // The name of this type of electric field driver.
   static const string s_CLASS_NAME;

   // Indices of specific parameters in m_parameters.
   // Note that PHASE_DECAY_TIME_STEPS and FWHM are not used in the fortran
   // to which m_parameters is passed.  We only need them in order to write
   // all the parameters in printParameters.
   enum {
      XWIDTH,
      YWIDTH,
      SHAPE,
      OMEGA,
      E0,
      T0,
      TRAMPUP,
      THOLD,
      TRAMPDOWN,
      XSHAPE,
      LWIDTH,
      X0,
      ALPHA,
      TRES,
      PHASE_DECAY_TIME_STEPS,
      FWHM,
      NUM_PARAMS
   };

   // The parameters necessary for the evaluation of this driver.
   vector<double> m_parameters;

   // The name of this driver.  This is for restart capability.  There can
   // be multiple of these drivers for a given KineticSpecies so we construct
   // a unique name for each which is the name of the sub-database in the
   // restart file containing this object's state.
   string m_name;

   // If true code will compute a random, noisy phase.
   bool m_do_random_phase;

   // Phase in cos varying part of expression.
   mutable double m_phase;

   // Half time step phase in cos varying part of expression.
   mutable double m_phase_h;

   // The number of evaluations of the phase that have occurred.  We need to
   // track this and write it to restart so that we can continue the sequence
   // of random phases properly.
   mutable int m_num_phase_evals;

   // The underlying random value for the computation of the random phase.
   mutable unsigned long m_next;

   // Constant factors used in the computation of the random phase.
   double m_factor_1;
   double m_factor_2;

   // The selected type of x envelope shaping.
   int m_shape_type;
};

} // end namespace Loki

#endif
